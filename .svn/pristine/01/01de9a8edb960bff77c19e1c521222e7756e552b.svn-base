/**
* Text Editor Lab
* CS 241 - Spring 2018
*/

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include "document.h"
#include "vector.h"

struct document {
    vector *vector;
};

document *document_create() {
    document *this = (document *)malloc(sizeof(document));
    assert(this);
    this->vector = vector_create(string_copy_constructor, string_destructor,
                                 string_default_constructor);
    return this;
}

void document_write_to_file(document *this, const char *path_to_file) {
    assert(this);
    assert(path_to_file);
    // see the comment in the header file for a description of how to do this!
    // TODO: your code here!
    int files = open(path_to_file, O_RDWR | O_TRUNC | O_CREAT, 0666);
    if (files < 0) {
      perror ("Failed to open the file!");
      exit(1);
    }
    VECTOR_FOR_EACH(this->vector, thing, {
      dprintf(files, "%s\n", thing);
    });
    close(files);
}

document *document_create_from_file(const char *path_to_file) {
    assert(path_to_file);
    // this function will read a file which is created by document_write_to_file
    // TODO: your code here!
    document *result = document_create();
    FILE *files = fopen(path_to_file, "r");
    if (files == NULL) {
      return result;
    }
    char *buffer = NULL;
    size_t capacity = 0;
    while(1) {
      ssize_t temp = getline(&buffer, &capacity, files);
      if (temp < 0)
        break;
      buffer[temp - 1] = '\0';
      vector_push_back(result->vector, buffer);
    }
    free(buffer);
    fclose(files);
    return result;
}

void document_destroy(document *this) {
    assert(this);
    vector_destroy(this->vector);
    free(this);
}

size_t document_size(document *this) {
    assert(this);
    return vector_size(this->vector);
}

void document_set_line(document *this, size_t line_number, const char *str) {
    assert(this);
    assert(str);
    size_t index = line_number - 1;
    vector_set(this->vector, index, (void *)str);
}

const char *document_get_line(document *this, size_t line_number) {
    assert(this);
    assert(line_number > 0);
    size_t index = line_number - 1;
    return (const char *)vector_get(this->vector, index);
}

void document_insert_line(document *this, size_t line_number, const char *str) {
    assert(this);
    assert(str);
    // TODO: your code here!
    // How are you going to handle the case when the user wants to
    // insert a line past the end of the document?
    if (!str) {
      perror("NULL is invalid");
      exit(2);
    }
    if (vector_size(this->vector) < line_number - 1) {
      size_t emptylines = line_number - 1 -vector_size(this->vector);
      while (emptylines != 0) {
        vector_push_back(this->vector, "");
        emptylines--;
      }
    }
    if (vector_size(this->vector) == line_number - 1)
      vector_push_back(this->vector, (void*)str);
    else {
      char *temp = strdup(str);
      vector_insert(this->vector, line_number - 1, temp);
    }
}

void document_delete_line(document *this, size_t line_number) {
    assert(this);
    assert(line_number > 0);
    size_t index = line_number - 1;
    vector_erase(this->vector, index);
}

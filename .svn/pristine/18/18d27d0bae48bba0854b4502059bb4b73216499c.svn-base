/**
* Parallel Make Lab
* CS 241 - Spring 2018
*/


#include "format.h"
#include "graph.h"
#include "parmake.h"
#include "parser.h"
#include "set.h"
#include "dictionary.h"
#include "vector.h"

#include <unistd.h>
#include <time.h>
#include <sys/stat.h>


graph *graph_rule;
set *traversed;
vector *task;
int count;
// pthread_mutex_t first = PTHREAD_MUTEX_INITIALIZER;
// pthread_mutex_t second = PTHREAD_MUTEX_INITIALIZER;

// dfs
int det_cycle(char* node){
  set_add(traversed, node);
  vector* temp = graph_neighbors(graph_rule, node);
  for(size_t i = 0; i < vector_size(temp); i++){
    char* next = vector_get(temp, i);
    if(set_contains(traversed, next)){
      // if next is where I have already traversed then there is a cycle
      vector_destroy(temp);
      return 1;
    }
    if(det_cycle(next)){
      vector_destroy(temp);
      return 1;
    }
  }
  // backtracking
  set_remove(traversed, node);
  vector_destroy(temp);
  return 0;
}

int run_command(char *target) {
  rule_t *curr_rule = graph_get_vertex_value(graph_rule, target);
  if (curr_rule->state != 0) {
    return curr_rule->state;
  }
  vector *dep_rules = graph_neighbors(graph_rule, target);
  // failed -> mark weather the rule is failing
  int failed = 0;
  for (size_t i = 0; i < vector_size(dep_rules); i++) {
    rule_t *temp_rule = (rule_t*)graph_get_vertex_value(graph_rule, (char*)vector_get(dep_rules, i));
    if (run_command(temp_rule->target) == -1) {
      failed = 1;
    }
  }
  if (failed) {
    curr_rule->state = -1;
    vector_destroy(dep_rules);
    return -1;
  }
  int ondisc = access(curr_rule->target, F_OK);
  int run_rule = 0;
  if (ondisc != -1) {
    struct stat time1;
    struct stat time2;
    stat(curr_rule->target, &time1);
    for (size_t i = 0; i < vector_size(dep_rules); i++) {
      char *curr_rule_dep = vector_get(dep_rules, i);
      if (access(curr_rule_dep, F_OK) == -1) {
        run_rule = 1;
        break;
      }
      stat(curr_rule_dep, &time2);
      if (difftime(time1.st_mtime, time2.st_mtime) < 0) {
        run_rule = 1;
        break;
      }
    }
    if (!run_rule) {
      curr_rule->state = 1;
      vector_destroy(dep_rules);
      return 1;
    }
  }
  vector *commands = curr_rule->commands;
  for (size_t i = 0; i < vector_size(commands); i++) {
    if (system(vector_get(commands, i)) != 0) {
      // filed = 1;
      // we need to return here for the test
      curr_rule->state = -1;
      vector_destroy(dep_rules);
      return -1;
    }
  }
  if (failed) {
    curr_rule->state = -1;
    vector_destroy(dep_rules);
    return -1;
  }
  curr_rule->state = 1;
  vector_destroy(dep_rules);
  return 1;
}


int parmake(char *makefile, size_t num_threads, char **targets) {
    // good luck!
    graph_rule = parser_parse_makefile(makefile, targets);
    vector *target_dep = graph_neighbors(graph_rule, "");
    for (size_t i = 0; i < vector_size(target_dep); i++) {
      traversed = string_set_create();
      char *target = (char*)vector_get(target_dep, i);
      if (det_cycle(target)) {
        print_cycle_failure(target);
      }
      else {
        run_command(target);
      }
      set_destroy(traversed);
    }
    graph_destroy(graph_rule);
    vector_destroy(target_dep);
    return 0;
}

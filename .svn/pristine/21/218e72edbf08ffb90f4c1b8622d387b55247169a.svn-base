/**
* Critical Concurrency Lab
* CS 241 - Spring 2018
*/

#include "queue.h"
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * This queue is implemented with a linked list of queue_nodes.
 */
typedef struct queue_node {
    void *data;
    struct queue_node *next;
} queue_node;

struct queue {
    /* queue_node pointers to the head and tail of the queue */
    queue_node *head, *tail;

    /* The number of elements in the queue */
    ssize_t size;

    /**
     * The maximum number of elements the queue can hold.
     * max_size is non-positive if the queue does not have a max size.
     */
    ssize_t max_size;

    /* Mutex and Condition Variable for thread-safety */
    pthread_cond_t cv;
    pthread_mutex_t m;
};

queue *queue_create(ssize_t max_size) {
    /* Your code here */
    queue *temp = malloc(sizeof(queue));
    temp->head = NULL;
    temp->tail = NULL;
    temp->size = 0;
    temp->max_size = max_size;
    pthread_cond_init(&(temp->cv), NULL);
    pthread_mutex_init(&(temp->m), NULL);
    return temp;
}

void queue_destroy(queue *this) {
    /* Your code here */
    pthread_mutex_destroy(&(this->m));
    pthread_cond_destroy(&(this->cv));
    queue_node* temp1 = this->head;
    queue_node* temp2 = NULL;
    while (temp1) {
      temp2 = temp1->next;
      // if (temp1->data) {
      //   free(temp1->data);
      // }
      free(temp1);
      temp1 = temp2;
    }
    free(this);
}

void queue_push(queue *this, void *data) {
    /* Your code here */
    pthread_mutex_lock(&this->m);
    if(this->max_size > 0){
      while(this->size == this->max_size){
        pthread_cond_wait(&this->cv, &this->m);
      }
    }
    queue *temp = malloc(sizeof(queue_node));
    temp->data = data;
    temp->next = NULL;
    if(this->head == NULL){
      this->head = temp;
    }
    else {
      this->tail->next = temp;
    }
    this->tail = temp;
    this->size++;
    pthread_cond_broadcast(&this->cv);
    pthread_mutex_unlock(&this->m);
}

void *queue_pull(queue *this) {
    /* Your code here */
    pthread_mutex_lock(&this->m);
    while(this->size == 0){
      pthread_cond_wait(&this->cv, &this->m);
    }
    queue_node* temp = this->head;
    void* ans = temp->data;
    this->head = temp->next;
    if (this->size == 1) {
      this->tail = NULL;
    }
    free(temp);
    this->size--;
    pthread_cond_broadcast(&this->cv);
    pthread_mutex_unlock(&this->m);
    return ans;
}
